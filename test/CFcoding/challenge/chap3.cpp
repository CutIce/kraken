//
// Created by hsh on 2020/8/1.
//

#include <iostream>
#include <stack>
#include <deque>
#include <queue>
#include <tuple>
#include <set>
#include <map>
#include <algorithm>
#include <string.h>
#include <math.h>
using namespace std;
int n;
/*
// segement tree
const int MAX_N = 1 << 17;
int n,dat[2 * MAX_N - 1 ];

void init(int n_){
    int n = 1 ;
    while(n < n_){
        n *= 2;
    }

    for (int i=0;i<n;++i)
        dat[i] = 0;
}
// 更新函数 k-th 更新为a
void updata(int k ,int a){
    k += n-1;
    dat[k] = a;
    while( k > 0 ){
        k = (k-1) /2;
        dat[k] = max(dat[2*k+1], dat[2*k+2]);
    }
}

int query (int a, int b ,int k, int l ,int r) {
    if (a >= r || b <= l) return -1;
    if (a <= l && r <= b) return dat[k];
    else {
        int v1 = query(a, b, 2 * k + 1, l, (l + r) / 2);
        int v2 = query(a, b, 2 * k + 2, (l + r) / 2, r);
        return max(v1, v2);
    }
}
*/

const int MAX_N = 1 << 17;
int l[10100];
int tree[10100];
void init(int n){
    for (int i=0;i<10100;++i)
    {   l[i] = 0;  tree[i] =0;}
}

const double du = acos(-1) / 180;
double sin_x [360] ={
        0,0.0174524,0.0348995,0.052336,0.0697565,0.0871557,0.104528,0.121869,0.139173,
        0.156434,0.173648,0.190809,0.207912,0.224951,0.241922,0.258819,0.275637,0.292372,0.309017,
        0.325568,0.34202,0.358368,0.374607,0.390731,0.406737,0.422618,0.438371,0.45399,0.469472,
        0.48481,0.5,0.515038,0.529919,0.544639,0.559193,0.573576,0.587785,0.601815,0.615661,
        0.62932,0.642788,0.656059,0.669131,0.681998,0.694658,0.707107,0.71934,0.731354,0.743145,
        0.75471,0.766044,0.777146,0.788011,0.798636,0.809017,0.819152,0.829038,0.838671,0.848048,
        0.857167,0.866025,0.87462,0.882948,0.891007,0.898794,0.906308,0.913545,0.920505,0.927184,
        0.93358,0.939693,0.945519,0.951057,0.956305,0.961262,0.965926,0.970296,0.97437,0.978148,
        0.981627,0.984808,0.987688,0.990268,0.992546,0.994522,0.996195,0.997564,0.99863,0.999391,
        0.999848,1,0.999848,0.999391,0.99863,0.997564,0.996195,0.994522,0.992546,0.990268,
        0.987688,0.984808,0.981627,0.978148,0.97437,0.970296,0.965926,0.961262,0.956305,0.951057,
        0.945519,0.939693,0.93358,0.927184,0.920505,0.913545,0.906308,0.898794,0.891007,0.882948,
        0.87462,0.866025,0.857167,0.848048,0.838671,0.829038,0.819152,0.809017,0.798636,0.788011,
        0.777146,0.766044,0.75471,0.743145,0.731354,0.71934,0.707107,0.694658,0.681998,0.669131,
        0.656059,0.642788,0.62932,0.615661,0.601815,0.587785,0.573576,0.559193,0.544639,0.529919,
        0.515038,0.5,0.48481,0.469472,0.45399,0.438371,0.422618,0.406737,0.390731,0.374607,
        0.358368,0.34202,0.325568,0.309017,0.292372,0.275637,0.258819,0.241922,0.224951,0.207912,
        0.190809,0.173648,0.156434,0.139173,0.121869,0.104528,0.0871557,0.0697565,0.052336,0.0348995,
        0.0174524,1.22461e-16,-0.0174524,-0.0348995,-0.052336,-0.0697565,-0.0871557,-0.104528,-0.121869,-0.139173,
        -0.156434,-0.173648,-0.190809,-0.207912,-0.224951,-0.241922,-0.258819,-0.275637,-0.292372,-0.309017,
        -0.325568,-0.34202,-0.358368,-0.374607,-0.390731,-0.406737,-0.422618,-0.438371,-0.45399,-0.469472,
        -0.48481,-0.5,-0.515038,-0.529919,-0.544639,-0.559193,-0.573576,-0.587785,-0.601815,-0.615661,
        -0.62932,-0.642788,-0.656059,-0.669131,-0.681998,-0.694658,-0.707107,-0.71934,-0.731354,-0.743145,
        -0.75471,-0.766044,-0.777146,-0.788011,-0.798636,-0.809017,-0.819152,-0.829038,-0.838671,-0.848048,
        -0.857167,-0.866025,-0.87462,-0.882948,-0.891007,-0.898794,-0.906308,-0.913545,-0.920505,-0.927184,
        -0.93358,-0.939693,-0.945519,-0.951057,-0.956305,-0.961262,-0.965926,-0.970296,-0.97437,-0.978148,
        -0.981627,-0.984808,-0.987688,-0.990268,-0.992546,-0.994522,-0.996195,-0.997564,-0.99863,-0.999391,
        -0.999848,-1,-0.999848,-0.999391,-0.99863,-0.997564,-0.996195,-0.994522,-0.992546,-0.990268,
        -0.987688,-0.984808,-0.981627,-0.978148,-0.97437,-0.970296,-0.965926,-0.961262,-0.956305,-0.951057,
        -0.945519,-0.939693,-0.93358,-0.927184,-0.920505,-0.913545,-0.906308,-0.898794,-0.891007,-0.882948,
        -0.87462,-0.866025,-0.857167,-0.848048,-0.838671,-0.829038,-0.819152,-0.809017,-0.798636,-0.788011,
        -0.777146,-0.766044,-0.75471,-0.743145,-0.731354,-0.71934,-0.707107,-0.694658,-0.681998,-0.669131,
        -0.656059,-0.642788,-0.62932,-0.615661,-0.601815,-0.587785,-0.573576,-0.559193,-0.544639,-0.529919,
        -0.515038,-0.5,-0.48481,-0.469472,-0.45399,-0.438371,-0.422618,-0.406737,-0.390731,-0.374607,
        -0.358368,-0.34202,-0.325568,-0.309017,-0.292372,-0.275637,-0.258819,-0.241922,-0.224951,-0.207912,
        -0.190809,-0.173648,-0.156434,-0.139173,-0.121869,-0.104528,-0.0871557,-0.0697565,-0.052336,-0.0348995,
        -0.0174524};
double cos_x [360] = {1,0.999848,0.999391,0.99863,0.997564,0.996195,0.994522,0.992546,0.990268,0.987688,0.984808,0.981627,0.978148,0.97437,
                      0.970296,0.965926,0.961262,0.956305,0.951057,0.945519,0.939693,0.93358,0.927184,0.920505,0.913545,0.906308,0.898794,0.891007,
                      0.882948,0.87462,0.866025,0.857167,0.848048,0.838671,0.829038,0.819152,0.809017,0.798636,0.788011,0.777146,0.766044,
                      0.75471,0.743145,0.731354,0.71934,0.707107,0.694658,0.681998,0.669131,0.656059,0.642788,0.62932,0.615661,0.601815,0.587785,
                      0.573576,0.559193,0.544639,0.529919,0.515038,0.5,0.48481,0.469472,0.45399,0.438371,0.422618,0.406737,0.390731,0.374607,
                      0.358368,0.34202,0.325568,0.309017,0.292372,0.275637,0.258819,0.241922,0.224951,0.207912,0.190809,0.173648,0.156434,0.139173,
                      0.121869,0.104528,0.0871557,0.0697565,0.052336,0.0348995,0.0174524,6.12303e-17,-0.0174524,-0.0348995,-0.052336,-0.0697565,
                      -0.0871557,-0.104528,-0.121869,-0.139173,-0.156434,-0.173648,-0.190809,-0.207912,-0.224951,-0.241922,-0.258819,-0.275637,-0.292372,
                      -0.309017,-0.325568,-0.34202,-0.358368,-0.374607,-0.390731,-0.406737,-0.422618,-0.438371,-0.45399,-0.469472,-0.48481,-0.5,
                      -0.515038,-0.529919,-0.544639,-0.559193,-0.573576,-0.587785,-0.601815,-0.615661,-0.62932,-0.642788,-0.656059,-0.669131,-0.681998,
                      -0.694658,-0.707107,-0.71934,-0.731354,-0.743145,-0.75471,-0.766044,-0.777146,-0.788011,-0.798636,-0.809017,-0.819152,-0.829038,
                      -0.838671,-0.848048,-0.857167,-0.866025,-0.87462,-0.882948,-0.891007,-0.898794,-0.906308,-0.913545,-0.920505,-0.927184,-0.93358,
                      -0.939693,-0.945519,-0.951057,-0.956305,-0.961262,-0.965926,-0.970296,-0.97437,-0.978148,-0.981627,-0.984808,-0.987688,-0.990268,
                      -0.992546,-0.994522,-0.996195,-0.997564,-0.99863,-0.999391,-0.999848,-1,-0.999848,-0.999391,-0.99863,-0.997564,-0.996195,
                      -0.994522,-0.992546,-0.990268,-0.987688,-0.984808,-0.981627,-0.978148,-0.97437,-0.970296,-0.965926,-0.961262,-0.956305,
                      0.951057,-0.945519,-0.939693,-0.93358,-0.927184,-0.920505,-0.913545,-0.906308,-0.898794,-0.891007,-0.882948,-0.87462,-0.866025,
                      -0.857167,-0.848048,-0.838671,-0.829038,-0.819152,-0.809017,-0.798636,-0.788011,-0.777146,-0.766044,-0.75471,-0.743145,-0.731354,-0.71934,-0.707107,-0.694658,-0.681998,-0.669131,
                      -0.656059,-0.642788,-0.62932,-0.615661,-0.601815,-0.587785,-0.573576,-0.559193,-0.544639,-0.529919,-0.515038,-0.5,-0.48481,
                      -0.469472,-0.45399,-0.438371,-0.422618,-0.406737,-0.390731,-0.374607,-0.358368,-0.34202,-0.325568,-0.309017,-0.292372,
                      -0.275637,-0.258819,-0.241922,-0.224951,-0.207912,-0.190809,-0.173648,-0.156434,-0.139173,-0.121869,-0.104528,-0.0871557,
                      -0.0697565,-0.052336,-0.0348995,-0.0174524,-1.83691e-16,0.0174524,0.0348995,0.052336,0.0697565,0.0871557,0.104528,0.121869,
                      0.139173,0.156434,0.173648,0.190809,0.207912,0.224951,0.241922,0.258819,0.275637,0.292372,0.309017,0.325568,0.34202,
                      0.358368,0.374607,0.390731,0.406737,0.422618,0.438371,0.45399,0.469472,0.48481,0.5,0.515038,0.529919,0.544639,0.559193,
                      0.573576,0.587785,0.601815,0.615661,0.62932,0.642788,0.656059,0.669131,0.681998,0.694658,0.707107,0.71934,0.731354,0.743145,
                      0.75471,0.766044,0.777146,0.788011,0.798636,0.809017,0.819152,0.829038,0.838671,0.848048,0.857167,0.866025,0.87462,
                      0.882948,0.891007,0.898794,0.906308,0.913545,0.920505,0.927184,0.93358,0.939693,0.945519,0.951057,0.956305,0.961262,0.965926,
                      0.970296,0.97437,0.978148,0.981627,0.984808,0.987688,0.990268,0.992546,0.994522,0.996195,0.997564,0.99863,0.999391,0.999848};
int main() {

    cin >> n;
    int c;
    cin >> c;
    init(n);
    for (int i = 0; i < n; ++i)
        cin >> l[i];
    for (int i = n - 1; i >= 0; --i) {
        tree[i] = tree[1 + 1] + l[i];
    }
    for (int i = 0; i < n; ++i) cout << l[i] << " ";
    cout << endl;
    for (int i = 0; i < n; ++i) cout << tree[i] << " ";
    double place = 0.0;
    int angle_now = 180;
    int s, a;
//    while(c--){
//        cin>>s>>a;
//        angle_now -= a;
//        place += tree[s] * sin_x[angle_now];
//        cout<<place<<endl;
//    }
    return 0;
}



// 树状数组 Binary Indexed Tree
int bit[MAX_N];

int sum(int i){
    int s =0;
    while (i>0){
        s += bit[i];
        i -= i & -i;
    }
    return s;
}

void add(int i, int x){
    while (i<=n){
        bit[i] +=x;
        i += i & -i;
    }
}

typedef long long ll;
int a[MAX_N];
void solve(){
    ll ans = 0;
    for (int j = 0; j<n;++j){
        ans += j - sum(a[j]);
        add(a[j], 1);
    }
    printf("%lld\n", ans);
}